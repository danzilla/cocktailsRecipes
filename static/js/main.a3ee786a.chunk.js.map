{"version":3,"sources":["reportWebVitals.js","redux/reducers/fetchReducers.js","redux/store.js","redux/actions/fetchAction.js","app/Navigation/index.js","app/AlchInfo/index.js","app/CocktailsDetails/index.js","app/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isFetching","isError","currentIngredientID","ingredientDetails","ingredientCocktails","cocktailsDetails","fetchReducers","state","action","type","Object","assign","data","ingredients","idIngredient","store","createStore","composeWithDevTools","applyMiddleware","thunk","receive_error_ingredient_details","err","receive_error_ingredient_cocktails","receive_error_cocktails_details","connect","props","handleClick","e","console","log","JSON","stringify","Alcohol","dispatch","ingredient","ingredientG","replace","getState","fetch","json","receive_ingredient_details","catch","thunk_action_fetch_ingredient_Details","drinks","receive_ingredient_cocktails","thunk_action_fetch_ingredient_Cocktails","AlcoholItems","map","index","Nav","Item","Link","eventKey","onClick","Row","className","Col","variant","paragraph","strDescription","match","Accordion","defaultActiveKey","Card","Toggle","as","Header","Button","strIngredient","Badge","Collapse","Body","Alert","sentances","CockTailCardData","smileyz","smiley","Math","floor","random","length","emojifyOptions","style","height","handleClickOnCard","cockTailID","idDrink","receive_cocktails_details","CockTailCardDetails","CockTail","Title","sm","md","Image","width","src","strDrinkThumb","alt","strDrink","rounded","strCategory","strAlcoholic","strGlass","dateModified","Text","keys","filter","CockTailx","includes","item","bg","emojify","CockTailsCard","CockTails","Media","loadingMsg","drinkIconz","drinkIcon","Color","require","randomColor","luminosity","format","alpha","Container","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3ee786a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n  isFetching: false,\r\n  isError: false,\r\n  currentIngredientID: \"\", \r\n  ingredientDetails: {}, \r\n  ingredientCocktails: {},\r\n  cocktailsDetails: {},\r\n};\r\n// Fetch_Reducers\r\nconst fetchReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    // INGREDIENT_DETAILS\r\n    case \"FETCHING_INGREDIENT_DETAILS\":\r\n      return Object.assign({}, state, {\r\n        ingredientDetails: action.data,\r\n        isFetching: true,\r\n        isError: false\r\n      });\r\n    case \"FETCHED_INGREDIENT_DETAILS\":\r\n      return Object.assign({}, state, {\r\n        currentIngredientID: action.data.ingredients[0].idIngredient,\r\n        ingredientDetails: action.data,\r\n        isFetching: false,\r\n        isError: false\r\n      });\r\n    case \"ERROR_INGREDIENT_DETAILS\":\r\n      return Object.assign({}, state, {\r\n        ingredientDetails: action.data,\r\n        isFetching: false,\r\n        isError: true\r\n      });\r\n\r\n    // INGREDIENT_COCKTAILS\r\n    case \"FETCHING_INGREDIENT_COCKTAILS\":\r\n      return Object.assign({}, state, {\r\n        ingredientCocktails: action.data,\r\n        isFetching: true,\r\n        isError: false\r\n      });\r\n    case \"FETCHED_INGREDIENT_COCKTAILS\":\r\n      return Object.assign({}, state, {\r\n        ingredientCocktails: action.data,\r\n        isFetching: false,\r\n        isError: false\r\n      });\r\n    case \"ERROR_INGREDIENT_COCKTAILS\":\r\n      return Object.assign({}, state, {\r\n        ingredientCocktails: action.data,\r\n        isFetching: false,\r\n        isError: true\r\n      });\r\n\r\n    // COCKTAIL_DETAILS\r\n    case \"FETCHING_COCKTAIL_DETAILS\":\r\n      return Object.assign({}, state, {\r\n        cocktailsDetails: action.data,\r\n        isFetching: true,\r\n        isError: false\r\n      });\r\n    case \"FETCHED_COCKTAIL_DETAILS\":\r\n      return Object.assign({}, state, {\r\n        cocktailsDetails: action.data,\r\n        isFetching: false,\r\n        isError: false\r\n      });\r\n    case \"ERROR_COCKTAIL_DETAILS\":\r\n      return Object.assign({}, state, {\r\n        cocktailsDetails: action.data,\r\n        isFetching: false,\r\n        isError: true\r\n      });\r\n\r\n\r\n    // Default?\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default fetchReducers;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n// Reducers\r\nimport fetchReducers from \"./reducers/fetchReducers\";\r\n// DevTools\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n// Create Store\r\nconst store = createStore(fetchReducers, composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ));\r\n// Store\r\nexport default store;","// Store\r\nimport store from \"../store\";\r\n\r\n// INGREDIENT_DETAILS\r\n// Fetching \r\nexport const fetch_ingredient_details = () => {\r\n  return { type: \"FETCHING_INGREDIENT_DETAILS\", data: \"Loading\" }; };\r\n// Fetched\r\nexport const receive_ingredient_details = (data) => {\r\n  return { type: \"FETCHED_INGREDIENT_DETAILS\", data: data }; };\r\n// Error Fetching\r\nexport const receive_error_ingredient_details = (err) => {\r\n  return { type: \"ERROR_INGREDIENT_DETAILS\", data: err }; };\r\n\r\n// INGREDIENT_COCKTAILS\r\n// Fetching \r\nexport const fetch_ingredient_cocktails = () => {\r\n  return { type: \"FETCHING_INGREDIENT_COCKTAILS\", data: \"Loading\" }; };\r\n// Fetched\r\nexport const receive_ingredient_cocktails = (data) => {\r\n  return { type: \"FETCHED_INGREDIENT_COCKTAILS\", data: data }; };\r\n// Error Fetching\r\nexport const receive_error_ingredient_cocktails = (err) => {\r\n  return { type: \"ERROR_INGREDIENT_COCKTAILS\", data: err }; };\r\n\r\n\r\n// COCKTAIL_DETAILS\r\n// Fetching \r\nexport const fetch_cocktails_details = () => {\r\n  return { type: \"FETCHING_COCKTAIL_DETAILS\", data: \"Loading\" }; };\r\n// Fetched\r\nexport const receive_cocktails_details = (data) => {\r\n  return { type: \"FETCHED_COCKTAIL_DETAILS\", data: data }; };\r\n// Error Fetching\r\nexport const receive_error_cocktails_details = (err) => {\r\n  return { type: \"ERROR_COCKTAIL_DETAILS\", data: err }; };\r\n\r\n\r\n\r\n\r\n// Fetch Ingredient_Details\r\n// Buzz is here - ACTIONS - Fetch Ingredient_Details\r\nexport const thunk_action_fetch_ingredient_Details = (ingredient) => {\r\n  // strip ingredient for whitespace \r\n  const ingredientG = ingredient.replace(/\\s/g, \"\");\r\n  // 1.0 - Start fetch_post() - Start\r\n  store.dispatch(fetch_ingredient_details());\r\n  // 2.0 - During - return\r\n  return function(dispatch, getState) {\r\n    return fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?i=${ingredientG}`)\r\n      .then(data => data.json())\r\n      .then(data => { // 2.1 - when got data vs didnt get data\r\n        if (!data.ingredients) {\r\n          dispatch(receive_error_ingredient_details(\"Error retriving Ingredient_Details data\"))\r\n          // throw new Error(\"No such ingredient found!!\");\r\n        } else dispatch(receive_ingredient_details(data)); // 2.2 - when got data dispatch with receive_post(data) -> callback\r\n      })\r\n      .catch(err => dispatch(receive_error_ingredient_details(err))); // 3 - else receive_error()\r\n  };\r\n};\r\n\r\n// Fetch Ingredient_Cocktails\r\n// Buzz is here - ACTIONS - Fetch Ingredient_Cocktails\r\nexport const thunk_action_fetch_ingredient_Cocktails = (ingredient) => {\r\n  // strip ingredient for whitespace \r\n  const ingredientG = ingredient.replace(/\\s/g, \"\");\r\n  // 1.0 - Start fetch_post() - Start\r\n  store.dispatch(fetch_ingredient_cocktails());\r\n  // 2.0 - During - return\r\n  return function(dispatch, getState) {\r\n    return fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${ingredientG}`)\r\n      .then(data => data.json())\r\n      .then(data => { // 2.1 - when got data vs didnt get data\r\n        if (!data.drinks) {\r\n          dispatch(receive_error_ingredient_cocktails(\"Error retriving Ingredient_Cocktails data\"))\r\n          // throw new Error(\"No such ingredient found!!\");\r\n        } else dispatch(receive_ingredient_cocktails(data)); // 2.2 - when got data dispatch with receive_post(data) -> callback\r\n      })\r\n      .catch(err => dispatch(receive_error_ingredient_cocktails(err))); // 3 - else receive_error()\r\n  };\r\n};\r\n\r\n\r\n\r\n// Fetch Cocktails_Details\r\n// Buzz is here - ACTIONS - Fetch Cocktails_Details\r\nexport const thunk_action_fetch_Cocktails_Details = (cockTailID) => {\r\n  // 1.0 - Start fetch_post() - Start\r\n  store.dispatch(fetch_cocktails_details());\r\n  // 2.0 - During - return\r\n  return function(dispatch, getState) {\r\n    return fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${cockTailID}`)\r\n      .then(data => data.json())\r\n      .then(data => { // 2.1 - when got data vs didnt get data\r\n        if (!data.drinks) {\r\n          dispatch(receive_error_cocktails_details(\"Error retriving Cocktail_Details data\"))\r\n          // throw new Error(\"No such ingredient found!!\");\r\n        } else dispatch(receive_cocktails_details(data)); // 2.2 - when got data dispatch with receive_post(data) -> callback\r\n      })\r\n      .catch(err => dispatch(receive_error_cocktails_details(err))); // 3 - else receive_error()\r\n  };\r\n};\r\n\r\n\r\n/* //  Buzz is here - ACTIONS - Clear Store\r\nexport const thunk_action_clear = () => {\r\n  // 1 - Start fetch_post() - Start\r\n  store.dispatch(fetch_post());\r\n  // 2.0 - During - return\r\n  return function(dispatch, getState) {\r\n    console.log(\"dispatch: \" + JSON.stringify(dispatch));\r\n    console.log(\"getState: \" + JSON.stringify(getState));\r\n    dispatch(receive_post(\"Clear\"));\r\n    dispatch(receive_error());\r\n    console.log(\"Cleaned\");\r\n    console.log(JSON.stringify(getState));\r\n  };\r\n}; */","import React from \"react\";\r\nimport { Row, Col, Nav } from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n// Redux Actionz\r\nimport {\r\n  thunk_action_fetch_ingredient_Details,\r\n  thunk_action_fetch_ingredient_Cocktails\r\n} from \"../../redux/actions/fetchAction\";\r\n// Navigation - alcohol list\r\nconst Navigation = (props) => {\r\n  // onClick on Alcohol\r\n  const handleClick = (e) => {\r\n    console.log(\"this.props\" + JSON.stringify(e.Alcohol));\r\n    props.dispatch(thunk_action_fetch_ingredient_Details(e.Alcohol));\r\n    props.dispatch(thunk_action_fetch_ingredient_Cocktails(e.Alcohol));\r\n    // console.log(JSON.stringify(props));\r\n  };\r\n  // Choosen Alcohol list\r\n  const Alcoholz = [\"Whiskey\", \"Scotch\", \"Rum\", \"Tequila\", \"Brandy\", \"Gin\"]\r\n  const AlcoholItems = Alcoholz.map((Alcohol, index) => (\r\n    <Nav.Item key={index}>\r\n      <Nav.Link eventKey={index+1} onClick={() => handleClick({ Alcohol })} >\r\n        {Alcohol}\r\n      </Nav.Link>\r\n    </Nav.Item>\r\n  ));\r\n  // Bling\r\n  return (<Row className=\"mt-4\"><Col>\r\n    <Nav variant=\"tabs\" className=\"justify-content-center\">\r\n      {AlcoholItems}\r\n    </Nav>\r\n  </Col></Row>);\r\n};\r\n// Redux connect to store\r\nconst mapStateToProps = state => { return { data: state }; };\r\nexport default connect(mapStateToProps)(Navigation);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Alert, Accordion, Card, Badge, Button } from 'react-bootstrap';\r\n// Alcohol ingredients Info\r\nconst AlchoInfo = (props) => {\r\n  // Format Paragraph to Sentences \r\n  let paragraph = [\"Loadding..\"];\r\n  if(!props.data.ingredientDetails.ingredients){\r\n    paragraph = [\"Loadding...\"];\r\n   // paragraph = props.data.ingredientDetails.ingredients[0].strDescription.match(/[^\\s.!?]+[^.!?\\r\\n]+[.!?]*/g);\r\n  } else { \r\n    paragraph = props.data.ingredientDetails.ingredients[0].strDescription.match(/([^.!?]+[.!?]\"?)\\s?/g);\r\n  }\r\n  // Return AlchoInfo\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        {props.data.ingredientDetails.ingredients ? \r\n          (\r\n            <Accordion defaultActiveKey=\"1\" className=\"shadow-sm m-2 p-3 bg-white rounded\">\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                  <Button variant=\"light\">\r\n                    <h3>\r\n                      {props.data.ingredientDetails.ingredients[0].strIngredient}&nbsp;&nbsp;\r\n                      <small><Badge variant=\"info\"><i>More info</i></Badge></small>\r\n                    </h3>\r\n                  </Button>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <Alert variant=\"primary\">\r\n                      {/* Break it Down */}\r\n                      {paragraph.map((sentances, index) => (\r\n                        <p className=\"m-0 p-0\">{sentances}</p>\r\n                      ))}\r\n                      {/* \r\n                        <p>{props.data.ingredientDetails.ingredients[0].strDescription}</p>\r\n                      */}\r\n                    </Alert>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          ) : null\r\n        }\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n// Redux connect to store\r\nconst mapStateToProps = state => { return { data: state }; };\r\nexport default connect(mapStateToProps)(AlchoInfo);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Accordion, Card, Button, Alert, Media, Badge, Image } from 'react-bootstrap';\r\nimport {emojify} from 'react-emojione';\r\n// Redux Actionz\r\nimport { thunk_action_fetch_Cocktails_Details } from \"../../redux/actions/fetchAction\";\r\n// Cocktail Details\r\nconst CocktailsDetails = (props) => {\r\n  // Random CockTails Icon on every Loaddin~\r\n  let smileyz = [\"🧐\", \"🥴\", \"🤠\", \"😬\", \"🤗\", \"😋\", \"😍\", \"😇\", \"😁\"]\r\n  let smiley = smileyz[Math.floor(Math.random() * smileyz.length)]\r\n  let emojifyOptions = { style: { height: '50' } }\r\n  // onClick on Cocktails for MoreInfo\r\n  // CockTails information => fire action onClick\r\n  const handleClickOnCard = (e) => {\r\n    props.dispatch(thunk_action_fetch_Cocktails_Details(e.idDrink));\r\n    // console.log(\"this.props\" + JSON.stringify(e));\r\n  };\r\n  // Cocktail Detail => into => Componets\r\n  let CockTailCardDetails = props.data.cocktailsDetails;\r\n  let CockTailCardData;\r\n  if(CockTailCardDetails.drinks) {\r\n    // CockTailCardData = props.data.cocktailsDetails.drinks\r\n    CockTailCardData = CockTailCardDetails.drinks.map((CockTail, index) => (\r\n      // Card Details\r\n      <Card key={index} className=\"text-wrap p-1 m-1 shadow p-3 mb-5 bg-white rounded\">\r\n        <Card.Body>\r\n          <Card.Title className=\"mb-2 text-muted\">\r\n            <Row>\r\n              <Col sm=\"4\" md=\"2\">\r\n                <Image\r\n                  width={150}\r\n                  height={150}\r\n                  className=\"mr-3\"\r\n                  src={CockTail.strDrinkThumb}\r\n                  alt={CockTail.strDrink} \r\n                  rounded />\r\n              </Col>\r\n              <Col>\r\n                <h3> <b>{CockTail.strDrink}</b> </h3>\r\n                <h5 className=\"m-0\">Category: <small>{CockTail.strCategory}</small></h5>\r\n                <h5 className=\"m-0\">Drink Type: <small>{CockTail.strAlcoholic}</small></h5>\r\n                <h5 className=\"m-0\">Glass Type: <small>{CockTail.strGlass}</small></h5>\r\n                {CockTail.dateModified \r\n                  ? (<h5 className=\"m-0\">Updated: <small>{CockTail.dateModified}</small></h5>)\r\n                  : (null)\r\n                }\r\n              </Col>\r\n            </Row>\r\n          </Card.Title>\r\n          <Card.Text>\r\n            {/* Instructions */}\r\n            <Alert className=\"p-3\" variant=\"success\">\r\n              <h5>Instructions: </h5>\r\n              {\r\n                Object.keys(CockTail).filter(CockTailx => CockTailx.includes('strInstruction')).map((item, index) => {\r\n                  return(\r\n                    CockTail[item] != null\r\n                      ? (\r\n                          <p className=\"p-0 m-0\">\r\n                            {index+1} : {item} : {CockTail[item]}\r\n                          </p>\r\n                        )\r\n                      : (null)\r\n                  )\r\n                })\r\n              }\r\n            </Alert>\r\n            {/* Ingredients */}\r\n            <Alert className=\"p-3\" variant=\"success\">\r\n              <h5>Ingredients:</h5>\r\n              {\r\n                Object.keys(CockTail).filter(CockTailx => CockTailx.includes('strIngredient')).map((item, index) => {\r\n                  return(\r\n                    CockTail[item] != null\r\n                      ? (\r\n                          <p className=\"p-0 m-0\">\r\n                            {index+1} : {CockTail[item]}\r\n                          </p>\r\n                        )\r\n                      : (null)\r\n                  )\r\n                })\r\n              }\r\n            </Alert>\r\n            {/* Measure */}\r\n            <Alert className=\"p-3\" variant=\"success\">\r\n              <h5>Measure:</h5>\r\n              {\r\n                Object.keys(CockTail).filter(CockTailx => CockTailx.includes('strMeasure')).map((item, index) => {\r\n                  return(\r\n                    CockTail[item] != null\r\n                      ? (\r\n                          <p className=\"p-0 m-0\">\r\n                            {index+1} : {CockTail[item]}\r\n                          </p>\r\n                        )\r\n                      : (null)\r\n                  )\r\n                })\r\n              }\r\n            </Alert>\r\n            {/* Raw Data */}           \r\n            <Alert className=\"p-3\" variant=\"info\">\r\n              <h4>Raw Data:</h4>\r\n              {\r\n                Object.keys(CockTail).map((item,index) => {\r\n                  return(\r\n                    CockTail[item] != null\r\n                      ? (\r\n                          <p className=\"p-0 m-0\">\r\n                            {item} : {CockTail[item]}\r\n                          </p>\r\n                        )\r\n                      : (null)\r\n                  )\r\n                })\r\n              }\r\n            </Alert>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    ))\r\n  } else { \r\n    CockTailCardData = \r\n      <Card \r\n        className=\"text-wrap p-1 m-1 shadow p-3 mb-5 bg-white rounded\">\r\n        <Card.Body bg=\"Success\">\r\n          <Card.Text>\r\n            <h3>Loading... {emojify(smiley, emojifyOptions)}</h3>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n  }\r\n  // CockTails Cards\r\n  let CockTails = props.data.ingredientCocktails;\r\n  let CockTailsCard;\r\n  if (CockTails.drinks) {\r\n    console.log(\"Drink is on\");\r\n    CockTailsCard = CockTails.drinks.map((CockTail, index) => (\r\n      <Card key={index}>\r\n        <Accordion.Toggle\r\n          as={Card.Header} eventKey={index + 1}\r\n          onClick={() => handleClickOnCard(CockTail)}>\r\n            <Button variant=\"light\">\r\n              {CockTail.strDrink} <small><Badge variant=\"success\"><i>learn more</i></Badge></small>\r\n            </Button> \r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey={index + 1}>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md={12}>\r\n                {/* <h3> {CockTail.strDrink} </h3> */}\r\n                <Media>\r\n                  <Media.Body>\r\n                    {CockTailCardData}\r\n                  </Media.Body>\r\n                </Media>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    ));\r\n  } else { console.log(\"Drink is Not on\"); }\r\n  // Loading message\r\n  let loadingMsg = \"Click on any Ingrident ...\";\r\n  if(props.data.isFetching){\r\n    loadingMsg = <h1>Almost There, Loading.. {emojify(smiley, emojifyOptions)} </h1>\r\n  }\r\n  // Render\r\n  return (\r\n    <Row className=\"m-2\">\r\n      {CockTails.drinks ?\r\n        (\r\n          <Col className=\"shadow-sm p-3 mb-5 bg-white rounded\">\r\n            <Accordion defaultActiveKey=\"0\">\r\n              {CockTailsCard}\r\n            </Accordion>\r\n          </Col>\r\n        ) :\r\n        (\r\n          <Row className=\"w-100\">\r\n            <Col className=\"container\">\r\n              <Alert className=\"p-4 m-4 text-center w-100\" variant=\"success\">\r\n                <h2>\r\n                  Discover Cocktails Recipe! <br />\r\n                  <small>{loadingMsg}</small>\r\n                </h2>\r\n              </Alert>\r\n            </Col>\r\n          </Row>\r\n        )\r\n      }\r\n    </Row>\r\n  );\r\n};\r\n// Redux connect to store\r\nconst mapStateToProps = state => { return { data: state }; };\r\nexport default connect(mapStateToProps)(CocktailsDetails);","import React from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport {emojify} from 'react-emojione';\n// Componets\nimport Navigation from \"./Navigation\";\nimport AlchoInfo from \"./AlchInfo\";\nimport CocktailsDetails from \"./CocktailsDetails\";\n// App\nconst App = () => {\n  // Random CockTails Icon on every Actionz\n  let drinkIconz = [\"🍻\", \"🧉\", \"🥛\", \"🥂\", \"🍺\", \"🍶\", \"🥤\", \"🍷\", \"🍸\", \"🍹\", \"🥃\"]\n  let drinkIcon = drinkIconz[Math.floor(Math.random() * drinkIconz.length)]\n  let emojifyOptions = { style: { height: '50' } }\n  // RandomColor\n  const randomColor = require('randomcolor');\n  let Color = randomColor({\n    luminosity: 'dark',\n    format: 'rgba',\n    alpha: 0.7\n  })\n  // Cocktails App Dashboard\n  return (\n    <Container>\n      <h2 className=\"display-4 p-2 m-2 font-weight-bold text-center\">\n        <i style={{color: Color}}>Cocktails Recipes</i> {emojify(drinkIcon, emojifyOptions)}\n      </h2>\n      <Row>\n        <Col className=\"shadow-sm bg-white rounded\">\n          <Navigation />\n          <AlchoInfo />\n          <CocktailsDetails />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n// Redux connect to store\nconst mapStateToProps = state => { return { data: state }; };\nexport default connect(mapStateToProps)(App);","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n// Redux\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n// React app components \nimport App from \"./app\";\n// Stylesheets\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// App render\nReactDOM.render(\n  <Provider store={store}>\n    <App /> \n  </Provider>, document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}